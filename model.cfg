class Rotation
{
	type = "rotation";
	memory = 1;
	minValue = 0;
	maxValue = 1;
	angle0 = 0;
	angle1 = 1;
};
class CfgSkeletons
{
	class Default
	{
		isDiscrete = 1;
		skeletonInherit = "";
		skeletonBones[] = {};
	};
	class Vehicle : Default {
			skeletonBones[]=
			{
				"drivewheel","",
				"pedalR","",

				"wheel_1_1_damper_land","",
				"wheel_1_2_damper_land","",
				"wheel_1_3_damper_land","",
				"wheel_1_4_damper_land","",

				"wheel_2_1_damper_land","",
				"wheel_2_2_damper_land","",
				"wheel_2_3_damper_land","",
				"wheel_2_4_damper_land","",

				"wheel_1_1_damper","wheel_1_1_damper_land",
				"wheel_1_2_damper","wheel_1_2_damper_land",
				"wheel_1_3_damper","wheel_1_3_damper_land",
				"wheel_1_4_damper","wheel_1_4_damper_land",

				"wheel_2_1_damper","wheel_2_1_damper_land",
				"wheel_2_2_damper","wheel_2_2_damper_land",
				"wheel_2_3_damper","wheel_2_3_damper_land",
				"wheel_2_4_damper","wheel_2_4_damper_land",

				"wheel_1_1_steering","wheel_1_1_damper",
				"wheel_1_2_steering","wheel_1_2_damper",
				"wheel_1_3_steering","wheel_1_3_damper",
				"wheel_1_4_steering","wheel_1_4_damper",

				"wheel_2_1_steering","wheel_2_1_damper",
				"wheel_2_2_steering","wheel_2_2_damper",
				"wheel_2_3_steering","wheel_2_3_damper",
				"wheel_2_4_steering","wheel_2_4_damper",

				"wheel_1_1","wheel_1_1_steering",
				"wheel_1_2","wheel_1_2_steering",
				"wheel_1_3","wheel_1_3_steering",
				"wheel_1_4","wheel_1_4_steering",

				"wheel_2_1","wheel_2_1_steering",
				"wheel_2_2","wheel_2_2_steering",
				"wheel_2_3","wheel_2_3_steering",
				"wheel_2_4","wheel_2_4_steering",

				"wheel_1_1_unhide","wheel_1_1",
				"wheel_1_2_unhide","wheel_1_2",
				"wheel_1_3_unhide","wheel_1_3",
				"wheel_1_4_unhide","wheel_1_4",

				"wheel_2_1_unhide","wheel_2_1",
				"wheel_2_2_unhide","wheel_2_2",
				"wheel_2_3_unhide","wheel_2_3",
				"wheel_2_4_unhide","wheel_2_4",

				"wheel_1_1_hide","wheel_1_1",
				"wheel_1_2_hide","wheel_1_2",
				"wheel_1_3_hide","wheel_1_3",
				"wheel_1_4_hide","wheel_1_4",

				"wheel_2_1_hide","wheel_2_1",
				"wheel_2_2_hide","wheel_2_2",
				"wheel_2_3_hide","wheel_2_3",
				"wheel_2_4_hide","wheel_2_4",

				"OtocVez","",
				"OtocHlaven","OtocVez",
				// "ammo_belt","OtocHlaven",

				"ukaz_rychlo","",
				"ukaz_rpm","",


				"damageHide","",
				"damageVez","OtocVez",
				"damageHlaven","OtocHlaven",

			};
	};
         class Motorcycle: Vehicle
         {
                 skeletonInherit="Vehicle";
                 skeletonBones[]=
                 {
                         "volant","",
                         "ukaz_rychlo","volant",
                         "ukaz_rychlo2","volant",
                         "ukaz_rpm","volant",
                         "pravy predni tlumic nerot","",
                         "pravy predni tlumic","volant",
                         "pravy zadni tlumic","",
                         "Pravy predni","Pravy predni tlumic",
                         "Pravy zadni","pravy zadni tlumic",
                         "OtocVez","",
                         "OtocHlaven","OtocVez",
                         "stojanek","",
                         "WheelStandFront","Pravy predni tlumic",
                         "WheelStandBack","Pravy zadni tlumic",
                         "damageHide",""
                 };
         };
	class Car: Vehicle {
		skeletonInherit="Vehicle";
	};
	class Truck: Car{};
	class uaz_mgSkeleton:Car
	{
		isDiscrete=1;
		skeletonInherit="Car";
		skeletonBones[]=
		{
			"ammo_belt","OtocHlaven_Shake",
			"OtocHlaven_Shake","OtocHlaven",
			"magazine","OtocHlaven_Shake",
			"feedtray_cover","OtocHlaven_Shake",
			"bullet001","bullet002",
			"bullet002","bullet003",
			"bullet003","bullet004",
			"bullet004","ammo_belt"
		};
	};
	class Flag: Default {};
	class FlagCarrier: Default
	{
		skeletonInherit = "Default";
		skeletonBones[] =
		{
			"stozar","",
			"vlajka",""
		};
	};
};
class CfgModels
{
	class Default {
		sectionsInherit = "";
		sections[] = {};
		skeletonName = "";
	};
	class Vehicle: Default
	{
		sections[] =
		{
			"cislo",
			"grupa",
			"side",
			"sektor",
			"clan",
			"clan_sign",
			"podsvit pristroju",
			"poskozeni",
			"L svetlo",
			"P svetlo",
			"zasleh"
		};
	};
	class Flag: Default
	{
		sections[] = {"latka"};
		sectionsInherit = "Default";
	};
	class flag_auto: Flag {};
	class flag_alone: Flag {};
	class Car: Vehicle
	{
		htMin = 60;		// Minimum half-cooling time (in seconds)
		htMax = 1800;	// Maximum half-cooling time (in seconds)
		afMax = 200;	// Maximum temperature in case the model is alive (in celsius)
		mfMax = 100;	// Maximum temperature when the model is moving (in celsius)
		mFact = 0;		// Metabolism factor - number from interval <0, 1> (0 - metabolism has no influence, 1 - metabolism has full influence (no other temperature source will be considered)).
		tBody = 0;	 	// Metabolism temperature of the model (in celsius)

		sections[]=
		{
			"ammo",
/*			"sklo predni p",
			"sklo predni l",
			"sklo strana l",
			"sklo strana p",*/
			"zadni svetlo",
			"brzdove svetlo",
			"spz",
			"motor",
			"zbran",
			"vez",
			"zbytek",
			/*
			"wheel_1_1_hide",
			"wheel_1_2_hide",
			"wheel_1_3_hide",
			"wheel_1_4_hide",
			"wheel_2_1_hide",
			"wheel_2_2_hide",
			"wheel_2_3_hide",
			"wheel_2_4_hide",
			*/
			"clan",
			"clan_sign",
			"zasleh",
			"P svetlo",
			"L svetlo",
			"podsvit pristroju",
			"glass1",
			"glass2",
			"glass3",
			"glass4"
		};
		skeletonName="Car";
		class Animations
		{
			// destruct START
			class damageHide
			{
				type="hide";
				source="damage"; //damage //test
				selection="damageHide";
				hideValue=1.0;
			};
			class damageHideVez:damageHide
			{
				selection="OtocVez";
			};
			class damageHideHlaven:damageHide
			{
				selection="OtocHlaven";
			};

			// Wheels START
			// Wheels Complete Destruct START
			class wheel_1_1_destruct
			{
				type="hide";
				selection="wheel_1_1_hide";
				source="HitLFWheel";
				minValue = 0; // upravit na 0.99
				maxValue = 1; // upravit na 1.0
				hidevalue = 0.99;
			};
			class wheel_1_2_destruct:wheel_1_1_destruct {source="HitLBWheel";selection="wheel_1_2_hide";};
			class wheel_1_3_destruct:wheel_1_1_destruct {source="HitLMWheel";selection="wheel_1_3_hide";};
			class wheel_1_4_destruct:wheel_1_1_destruct {source="HitLF2Wheel";selection="wheel_1_4_hide";};

			class wheel_2_1_destruct:wheel_1_1_destruct {source="HitRFWheel";selection="wheel_2_1_hide";};
			class wheel_2_2_destruct:wheel_1_1_destruct {source="HitRBWheel";selection="wheel_2_2_hide";};
			class wheel_2_3_destruct:wheel_1_1_destruct {source="HitRMWheel";selection="wheel_2_3_hide";};
			class wheel_2_4_destruct:wheel_1_1_destruct {source="HitRF2Wheel";selection="wheel_2_4_hide";};

			class wheel_1_1_destruct_unhide
			{
				type="hide";
				selection="wheel_1_1_unhide";
				source="HitLFWheel";
				minValue = -1; // upravit na 0.99
				maxValue = 0; // upravit na 1.0
				hidevalue = 0.01;
				sourceAddress="mirror";
			};
			class wheel_1_2_destruct_unhide:wheel_1_1_destruct_unhide {source="HitLBWheel";selection="wheel_1_2_unhide";};
			class wheel_1_3_destruct_unhide:wheel_1_1_destruct_unhide {source="HitLMWheel";selection="wheel_1_3_unhide";};
			class wheel_1_4_destruct_unhide:wheel_1_1_destruct_unhide {source="HitLF2Wheel";selection="wheel_1_4_unhide";};

			class wheel_2_1_destruct_unhide:wheel_1_1_destruct_unhide {source="HitRFWheel";selection="wheel_2_1_unhide";};
			class wheel_2_2_destruct_unhide:wheel_1_1_destruct_unhide {source="HitRBWheel";selection="wheel_2_2_unhide";};
			class wheel_2_3_destruct_unhide:wheel_1_1_destruct_unhide {source="HitRMWheel";selection="wheel_2_3_unhide";};
			class wheel_2_4_destruct_unhide:wheel_1_1_destruct_unhide {source="HitRF2Wheel";selection="wheel_2_4_unhide";};

			// Wheels Complete Destruct END

			#define DamageOffset 0.2

			// Wheels Damage START
			class wheel_1_1_Damage:wheel_1_1_destruct
			{
				type="translation";
				axis="Basic_Damper_Destruct_Axis";
				memory=1;
				selection="wheel_1_1_damper_land";
				source="HitLFWheel";
				minValue = 0.0;
				maxValue = 1;
				offset0 = 0;
				offset1 = DamageOffset;
			};
			class wheel_1_2_Damage:wheel_1_1_Damage {source="HitLBWheel";selection="wheel_1_2_damper_land";};
			class wheel_1_3_Damage:wheel_1_1_Damage {source="HitLMWheel";selection="wheel_1_3_damper_land";};
			class wheel_1_4_Damage:wheel_1_1_Damage {source="HitLF2Wheel";selection="wheel_1_4_damper_land";};

			class wheel_2_1_Damage:wheel_1_1_Damage {source="HitRFWheel";selection="wheel_2_1_damper_land";};
			class wheel_2_2_Damage:wheel_1_1_Damage {source="HitRBWheel";selection="wheel_2_2_damper_land";};
			class wheel_2_3_Damage:wheel_1_1_Damage {source="HitRMWheel";selection="wheel_2_3_damper_land";};
			class wheel_2_4_Damage:wheel_1_1_Damage {source="HitRF2Wheel";selection="wheel_2_4_damper_land";};


			// animace damper smerem nahoru START
			class wheel_1_1_Damper_Damage_BackAnim:wheel_1_1_Damage {selection="wheel_1_1_damper";offset1 = -1.2*DamageOffset;};
			class wheel_1_2_Damper_Damage_BackAnim:wheel_1_1_Damper_Damage_BackAnim {source="HitLBWheel";selection="wheel_1_2_damper";};
			class wheel_1_3_Damper_Damage_BackAnim:wheel_1_1_Damper_Damage_BackAnim {source="HitLMWheel";selection="wheel_1_3_damper";};
			class wheel_1_4_Damper_Damage_BackAnim:wheel_1_1_Damper_Damage_BackAnim {source="HitLF2Wheel";selection="wheel_1_4_damper";};

			class wheel_2_1_Damper_Damage_BackAnim:wheel_1_1_Damper_Damage_BackAnim {source="HitRFWheel";selection="wheel_2_1_damper";};
			class wheel_2_2_Damper_Damage_BackAnim:wheel_1_1_Damper_Damage_BackAnim {source="HitRBWheel";selection="wheel_2_2_damper";};
			class wheel_2_3_Damper_Damage_BackAnim:wheel_1_1_Damper_Damage_BackAnim {source="HitRMWheel";selection="wheel_2_3_damper";};
			class wheel_2_4_Damper_Damage_BackAnim:wheel_1_1_Damper_Damage_BackAnim {source="HitRF2Wheel";selection="wheel_2_4_damper";};
			// animace damper smerem nahoru END

			// Wheels Damage END
			// Wheels END

				//Glass Damage START
				class Glass1_destruct
				{
					type="hide";
					selection="glass1";
					source="HitGlass1";
					minValue = 0; // upravit na 0.99
					maxValue = 1; // upravit na 1.0
					hidevalue = 0.99;
				};
				class Glass2_destruct:Glass1_destruct{selection="glass2";source="HitGlass2";};
				class Glass3_destruct:Glass1_destruct{selection="glass3";source="HitGlass3";};
				class Glass4_destruct:Glass1_destruct{selection="glass4";source="HitGlass4";};
				class Glass5_destruct:Glass1_destruct{selection="glass5";source="HitGlass5";};
				class Glass6_destruct:Glass1_destruct{selection="glass6";source="HitGlass6";};
				//Glass Damage END

			// destruct END
			class Fuel: Rotation
			{
				source="fuel";
				selection="fuel";
				axis="fuel_axis";
				maxValue=1;
				memory=1;
				angle0="rad -110";
				angle1=0;
			};
			class IndicatorSpeed: Rotation
			{
				source="speed";
				selection="mph";
				axis="mph_axis";
				memory=1;
				maxValue=38.900002;
				angle1="rad -265";
			};
			class IndicatorFuel: Rotation
			{
				type="rotation";
				source="fuel";
				selection="fuel_1";
				axis="fuel_1_axis";
				memory=1;
				minValue=0.000000;
				maxValue=1.000000;
				angle0=-0.087266;
				angle1=-1.658063;
			};
			class IndicatorRPM: Rotation
			{
				source="rpm";
				selection="rpm";
				axis="rpm_axis";
				memory=1;
				angle1="rad 80";
			};
			class DrivingWheel: Rotation
			{
				source="drivingWheel";
				selection="drivewheel";
				axis="drivewheel_axis";
				minValue=-1;
				maxValue=1;
				angle0=-1;
				angle1=1;
			};
			class Steering_1_1
			{
				type="rotationY";
				source="drivingWheel";
				selection="wheel_1_1_steering";
				axis="wheel_1_1_steering_axis";
				memory=1;
				minValue="rad -90";
				maxValue="rad +90";
				angle0=1.047198;
				angle1=-1.047198;
			};
			class Steering_2_1: Steering_1_1
			{
				selection="wheel_2_1_steering";
				axis="wheel_2_1_steering_axis";
			};
			class Wheel_1_1
			{
				type="rotationX";
				source="wheel";
				selection="wheel_1_1";
				axis="wheel_1_1_axis";
				memory=1;
				sourceAddress="loop";
				minValue=0;
				maxValue=1;
				angle0=0;
				angle1="rad -360";
			};
			class wheel_2_1: Wheel_1_1
			{
				selection="wheel_2_1";
				axis="wheel_2_1_axis";
			};
			class wheel_1_2: Wheel_1_1
			{
				selection="wheel_1_2";
				axis="wheel_1_2_axis";
			};
			class wheel_1_3: Wheel_1_1
			{
				selection="wheel_1_3";
				axis="wheel_1_3_axis";
			};
			class Wheel_2_2: Wheel_1_1
			{
				selection="wheel_2_2";
				axis="wheel_2_2_axis";
			};
			class Wheel_2_3: Wheel_1_1
			{
				selection="wheel_2_3";
				axis="wheel_2_3_axis";
			};
			class Wheel_1_4: Wheel_1_1
			{
				selection="wheel_1_4";
				axis="wheel_1_4_axis";
			};
			class Wheel_2_4: Wheel_1_1
			{
				selection="wheel_2_4";
				axis="wheel_2_4_axis";
			};
			class Wheel_1_1_Damper
			{
				type="translation";
				source="damper";
				selection="wheel_1_1_damper_land";
				axis="posun_wheel_1_1";
				animPeriod = 1;
				minValue="0";
				maxValue="1";
				offset0= "0.3";
				offset1= "-0.30";
				memory=1;
			};
			class wheel_2_1_Damper: Wheel_1_1_Damper
			{
				selection="wheel_2_1_damper_land";
				axis="posun_wheel_2_1";
			};
			class wheel_1_2_Damper: Wheel_1_1_Damper
			{
				selection="wheel_1_2_damper_land";
				axis="posun_wheel_1_2";
			};
			class Wheel_2_2_Damper: Wheel_1_1_Damper
			{
				selection="wheel_2_2_damper_land";
				axis="posun_wheel_2_2";
			};
			class wheel_1_3_Damper: Wheel_1_1_Damper
			{
				selection="wheel_1_3_damper_land";
				axis="posun_wheel_1_3";
			};
			class Wheel_2_3_Damper: Wheel_1_1_Damper
			{
				selection="wheel_2_3_damper_land";
				axis="posun_wheel_2_3";
			};
		};
	};
class Motorcycle: Vehicle
	{
		htMin = 60;		// Minimum half-cooling time (in seconds)
		htMax = 1800;	// Maximum half-cooling time (in seconds)
		afMax = 200;	// Maximum temperature in case the model is alive (in celsius)
		mfMax = 100;	// Maximum temperature when the model is moving (in celsius)
		mFact = 0;		// Metabolism factor - number from interval <0, 1> (0 - metabolism has no influence, 1 - metabolism has full influence (no other temperature source will be considered)).
		tBody = 0;	 	// Metabolism temperature of the model (in celsius)

		sectionsInherit="Vehicle";
		sections[]=
		{
			"ammo",
			"sklo predni p",
			"sklo predni l",
			"zadni svetlo",
			"brzdove svetlo",
			"spz",
			"zbytek",
			"karoserie",
			"palivo",
			"Pravy predni",
			"Pravy zadni"
		};
		skeletonName="Motorcycle";
		class Animations
		{
			class damageHide_Pravy_predni
			{
				type="hide";
				source="damage"; //damage //test
				selection="damageHide";
			};
			class damageHide_Pravy_zadni:damageHide_Pravy_predni {selection="Pravy zadni";};
			class IndicatorSpeed
			{
				type="rotation";
				source="speed";
				selection="ukaz_rychlo";
				axis="osa_rychlo";
				memory=1;
				animPeriod=0;
				minValue=0;
				maxValue="140 / 3.6";
				angle0=0;
				angle1="rad 280";
			};
			class IndicatorSpeed2
			{
				type="rotation";
				source="speed";
				selection="ukaz_rychlo2";
				axis="osa_rychlo2";
				memory=1;
				animPeriod=0;
				minValue=0;
				maxValue=16.670000;
				angle0=0;
				angle1="rad -240";
			};
			class IndicatorRPM
			{
				type="rotation";
				source="rpm";
				selection="ukaz_rpm";
				axis="osa_rpm";
				memory=1;
				animPeriod=0;
				minValue=0;
				maxValue=1;
				angle0=0;
				angle1="rad -340";
			};
			class DrivingWheel
			{
				type="rotation";
				source="drivingWheel";
				selection="volant";
				axis="volant osa";
				memory=1;
				animPeriod=0;
				minValue=-1;
				maxValue=1;
				angle0=18;
				angle1=-18;
			};
			class Support
			{
				type="rotationX";
				source="support";
				selection="stojanek";
				axis="osa stojanku";
				memory=1;
				animPeriod=0;
				angle0="rad 90";
				angle1=0;
			};
			class WheelStandFront
			{
				type="translationY";
				source="support";
				selection="WheelStandFront";
				minValue=0.000000;
				maxValue=0.055000;
			};
			class WheelStandBack
			{
				type="translationY";
				source="support";
				selection="WheelStandBack";
				minValue=0.000000;
				maxValue=0.055000;
			};
			class FrontWheel
			{
				type="rotationX";
				source="wheel";
				selection="Pravy predni";
				axis="Pravy predni osa";
				memory=1;
				animPeriod=0;
				sourceAddress="loop";
				minValue=0;
				maxValue=1;
				angle0=0;
				angle1="rad -360";
			};
			class BackWheel: FrontWheel
			{
				selection="Pravy zadni";
				axis="Pravy zadni osa";
			};
			class FrontWheelDamperVirt
			{
				type="translationY";
				source="FrontDamper";
				selection="pravy predni tlumic nerot";
				axis="";
				animPeriod=0;
				minValue=-1000;
				maxValue=1000;
			};
			class FrontWheelDamper: FrontWheelDamperVirt
			{
				source="FrontDamper";
				selection="pravy predni tlumic";
			};
			class BackWheelDamper: FrontWheelDamperVirt
			{
				source="BackDamper";
				selection="pravy zadni tlumic";
			};
		};
	};
};